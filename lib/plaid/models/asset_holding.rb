=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.664.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
  class AssetHolding
    # Unique id of investment position
    attr_accessor :asset_holding_id

    # US Dollar
    attr_accessor :currency

    # Description of holding
    attr_accessor :asset_holding_description

    # Investment position's market ticker symbol
    attr_accessor :asset_holding_symbol

    # Security name of investment holding
    attr_accessor :asset_holding_security_name

    # Number of units of holding
    attr_accessor :asset_holding_units

    # market value of investment position
    attr_accessor :asset_holding_market_value_amount

    # current price of investment holding
    attr_accessor :asset_holding_current_price_amount

    # Type of holding (e.g. bond, stock, crypto, other)
    attr_accessor :asset_holding_type

    # Whether or not the stock is restricted, i.e. \"Restricted\" or \"Not Restricted\"
    attr_accessor :asset_holding_restricted_indicator

    # Amount of holding vested
    attr_accessor :asset_holding_vested_amount

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset_holding_id' => :'AssetHoldingID',
        :'currency' => :'Currency',
        :'asset_holding_description' => :'AssetHoldingDescription',
        :'asset_holding_symbol' => :'AssetHoldingSymbol',
        :'asset_holding_security_name' => :'AssetHoldingSecurityName',
        :'asset_holding_units' => :'AssetHoldingUnits',
        :'asset_holding_market_value_amount' => :'AssetHoldingMarketValueAmount',
        :'asset_holding_current_price_amount' => :'AssetHoldingCurrentPriceAmount',
        :'asset_holding_type' => :'AssetHoldingType',
        :'asset_holding_restricted_indicator' => :'AssetHoldingRestrictedIndicator',
        :'asset_holding_vested_amount' => :'AssetHoldingVestedAmount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'asset_holding_id' => :'String',
        :'currency' => :'String',
        :'asset_holding_description' => :'String',
        :'asset_holding_symbol' => :'String',
        :'asset_holding_security_name' => :'String',
        :'asset_holding_units' => :'Float',
        :'asset_holding_market_value_amount' => :'Float',
        :'asset_holding_current_price_amount' => :'Float',
        :'asset_holding_type' => :'String',
        :'asset_holding_restricted_indicator' => :'String',
        :'asset_holding_vested_amount' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'asset_holding_id',
        :'currency',
        :'asset_holding_description',
        :'asset_holding_symbol',
        :'asset_holding_security_name',
        :'asset_holding_units',
        :'asset_holding_market_value_amount',
        :'asset_holding_current_price_amount',
        :'asset_holding_type',
        :'asset_holding_restricted_indicator',
        :'asset_holding_vested_amount'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::AssetHolding` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::AssetHolding`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'asset_holding_id')
        self.asset_holding_id = attributes[:'asset_holding_id']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'asset_holding_description')
        self.asset_holding_description = attributes[:'asset_holding_description']
      end

      if attributes.key?(:'asset_holding_symbol')
        self.asset_holding_symbol = attributes[:'asset_holding_symbol']
      end

      if attributes.key?(:'asset_holding_security_name')
        self.asset_holding_security_name = attributes[:'asset_holding_security_name']
      end

      if attributes.key?(:'asset_holding_units')
        self.asset_holding_units = attributes[:'asset_holding_units']
      end

      if attributes.key?(:'asset_holding_market_value_amount')
        self.asset_holding_market_value_amount = attributes[:'asset_holding_market_value_amount']
      end

      if attributes.key?(:'asset_holding_current_price_amount')
        self.asset_holding_current_price_amount = attributes[:'asset_holding_current_price_amount']
      end

      if attributes.key?(:'asset_holding_type')
        self.asset_holding_type = attributes[:'asset_holding_type']
      end

      if attributes.key?(:'asset_holding_restricted_indicator')
        self.asset_holding_restricted_indicator = attributes[:'asset_holding_restricted_indicator']
      end

      if attributes.key?(:'asset_holding_vested_amount')
        self.asset_holding_vested_amount = attributes[:'asset_holding_vested_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      asset_holding_type_validator = EnumAttributeValidator.new('String', ["Bond", "Stock", "Crypto", "Other"])
      return false unless asset_holding_type_validator.valid?(@asset_holding_type)
      asset_holding_restricted_indicator_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless asset_holding_restricted_indicator_validator.valid?(@asset_holding_restricted_indicator)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_holding_type Object to be assigned
    def asset_holding_type=(asset_holding_type)
      validator = EnumAttributeValidator.new('String', ["Bond", "Stock", "Crypto", "Other"])
      unless validator.valid?(asset_holding_type)
        fail ArgumentError, "invalid value for \"asset_holding_type\", must be one of #{validator.allowable_values}."
      end
      @asset_holding_type = asset_holding_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_holding_restricted_indicator Object to be assigned
    def asset_holding_restricted_indicator=(asset_holding_restricted_indicator)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(asset_holding_restricted_indicator)
        fail ArgumentError, "invalid value for \"asset_holding_restricted_indicator\", must be one of #{validator.allowable_values}."
      end
      @asset_holding_restricted_indicator = asset_holding_restricted_indicator
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset_holding_id == o.asset_holding_id &&
          currency == o.currency &&
          asset_holding_description == o.asset_holding_description &&
          asset_holding_symbol == o.asset_holding_symbol &&
          asset_holding_security_name == o.asset_holding_security_name &&
          asset_holding_units == o.asset_holding_units &&
          asset_holding_market_value_amount == o.asset_holding_market_value_amount &&
          asset_holding_current_price_amount == o.asset_holding_current_price_amount &&
          asset_holding_type == o.asset_holding_type &&
          asset_holding_restricted_indicator == o.asset_holding_restricted_indicator &&
          asset_holding_vested_amount == o.asset_holding_vested_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [asset_holding_id, currency, asset_holding_description, asset_holding_symbol, asset_holding_security_name, asset_holding_units, asset_holding_market_value_amount, asset_holding_current_price_amount, asset_holding_type, asset_holding_restricted_indicator, asset_holding_vested_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
