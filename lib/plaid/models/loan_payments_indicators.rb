=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.670.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Insights into loan payment transactions made by the user, tracking outgoing payments to loan providers.
  class LoanPaymentsIndicators
    # The total value of outflow transactions categorized as `LOAN_PAYMENTS`, across all the accounts in the report within the requested time window.
    attr_accessor :amount

    # The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.
    attr_accessor :iso_currency_code

    # The unofficial currency code associated with the amount. Always `null` if `iso_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
    attr_accessor :unofficial_currency_code

    attr_accessor :monthly_average

    # Detailed categories view of all the transactions that fall into the `LOAN_PAYMENTS` credit category within the given time window, across all the accounts in the report.
    attr_accessor :category_details

    # Up to 3 top service providers that the user had the most transactions for in the given time window, in descending order of total spend.  If the user has not spent money on any provider in the given time window, this list will be empty.
    attr_accessor :top_providers

    # The total number of transactions that fall into the `LOAN_PAYMENTS` credit category, across all the accounts in the report.
    attr_accessor :transactions_count

    # The monthly summaries of the transactions that fall into the `LOAN_PAYMENTS` credit category within the given time window, across all the accounts in the report.
    attr_accessor :monthly_summaries

    # The number of days since the last transaction that falls into the `LOAN_PAYMENTS` credit category, across all the accounts in the report.
    attr_accessor :days_since_last_occurrence

    # The percentage of the user's monthly inflows that was spent on transactions that fall into the `LOAN_PAYMENTS` credit category within the given time window, across all the accounts in the report. Valid values start and 0, with a value of 100 representing '100% of the inflows were spent on transactions that fall into the `LOAN_PAYMENTS` credit category'. If there's no available income for the giving time period, this field value will be `-1`
    attr_accessor :percentage_of_income

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'iso_currency_code' => :'iso_currency_code',
        :'unofficial_currency_code' => :'unofficial_currency_code',
        :'monthly_average' => :'monthly_average',
        :'category_details' => :'category_details',
        :'top_providers' => :'top_providers',
        :'transactions_count' => :'transactions_count',
        :'monthly_summaries' => :'monthly_summaries',
        :'days_since_last_occurrence' => :'days_since_last_occurrence',
        :'percentage_of_income' => :'percentage_of_income'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Float',
        :'iso_currency_code' => :'String',
        :'unofficial_currency_code' => :'String',
        :'monthly_average' => :'MonthlyAverage',
        :'category_details' => :'Array<CategoryExpenses>',
        :'top_providers' => :'Array<String>',
        :'transactions_count' => :'Integer',
        :'monthly_summaries' => :'Array<MonthlySummary>',
        :'days_since_last_occurrence' => :'Integer',
        :'percentage_of_income' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'amount',
        :'iso_currency_code',
        :'unofficial_currency_code',
        :'monthly_average',
        :'transactions_count',
        :'days_since_last_occurrence',
        :'percentage_of_income'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::LoanPaymentsIndicators` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::LoanPaymentsIndicators`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'iso_currency_code')
        self.iso_currency_code = attributes[:'iso_currency_code']
      end

      if attributes.key?(:'unofficial_currency_code')
        self.unofficial_currency_code = attributes[:'unofficial_currency_code']
      end

      if attributes.key?(:'monthly_average')
        self.monthly_average = attributes[:'monthly_average']
      end

      if attributes.key?(:'category_details')
        if (value = attributes[:'category_details']).is_a?(Array)
          self.category_details = value
        end
      end

      if attributes.key?(:'top_providers')
        if (value = attributes[:'top_providers']).is_a?(Array)
          self.top_providers = value
        end
      end

      if attributes.key?(:'transactions_count')
        self.transactions_count = attributes[:'transactions_count']
      end

      if attributes.key?(:'monthly_summaries')
        if (value = attributes[:'monthly_summaries']).is_a?(Array)
          self.monthly_summaries = value
        end
      end

      if attributes.key?(:'days_since_last_occurrence')
        self.days_since_last_occurrence = attributes[:'days_since_last_occurrence']
      end

      if attributes.key?(:'percentage_of_income')
        self.percentage_of_income = attributes[:'percentage_of_income']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          iso_currency_code == o.iso_currency_code &&
          unofficial_currency_code == o.unofficial_currency_code &&
          monthly_average == o.monthly_average &&
          category_details == o.category_details &&
          top_providers == o.top_providers &&
          transactions_count == o.transactions_count &&
          monthly_summaries == o.monthly_summaries &&
          days_since_last_occurrence == o.days_since_last_occurrence &&
          percentage_of_income == o.percentage_of_income
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, iso_currency_code, unofficial_currency_code, monthly_average, category_details, top_providers, transactions_count, monthly_summaries, days_since_last_occurrence, percentage_of_income].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
