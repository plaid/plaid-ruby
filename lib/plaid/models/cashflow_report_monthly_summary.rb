=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.652.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Monthly summary statistics derived from transaction-level data.
  class CashflowReportMonthlySummary
    # The start date of the period covered in this monthly summary.  This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.  The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    attr_accessor :start_date

    # The end date of the period included in this monthly summary.  This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.  The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    attr_accessor :end_date

    attr_accessor :starting_balance

    attr_accessor :ending_balance

    attr_accessor :average_daily_ending_balance

    attr_accessor :average_daily_inflow_amount

    attr_accessor :average_daily_outflow_amount

    attr_accessor :average_daily_net_cashflow_amount

    # The average count of the number of daily inflow transactions. Rounded to 2 decimal places.
    attr_accessor :average_daily_inflow_transaction_count

    # The average count of the number of daily outflow transactions. Rounded to 2 decimal places.
    attr_accessor :average_daily_outflow_transaction_count

    attr_accessor :total_revenue

    attr_accessor :total_loan_payment

    attr_accessor :total_variable_expense

    attr_accessor :total_payroll

    # The total number of all NSF transactions during this month.
    attr_accessor :nsf_transaction_count

    # The total number of all overdraft transactions during this month.
    attr_accessor :overdraft_transaction_count

    # The number of days with a negative daily average ending balance. The daily average is calculated across all valid accounts. Values will be in the range [0, 31].
    attr_accessor :negative_ending_balance_day_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'starting_balance' => :'starting_balance',
        :'ending_balance' => :'ending_balance',
        :'average_daily_ending_balance' => :'average_daily_ending_balance',
        :'average_daily_inflow_amount' => :'average_daily_inflow_amount',
        :'average_daily_outflow_amount' => :'average_daily_outflow_amount',
        :'average_daily_net_cashflow_amount' => :'average_daily_net_cashflow_amount',
        :'average_daily_inflow_transaction_count' => :'average_daily_inflow_transaction_count',
        :'average_daily_outflow_transaction_count' => :'average_daily_outflow_transaction_count',
        :'total_revenue' => :'total_revenue',
        :'total_loan_payment' => :'total_loan_payment',
        :'total_variable_expense' => :'total_variable_expense',
        :'total_payroll' => :'total_payroll',
        :'nsf_transaction_count' => :'nsf_transaction_count',
        :'overdraft_transaction_count' => :'overdraft_transaction_count',
        :'negative_ending_balance_day_count' => :'negative_ending_balance_day_count'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'starting_balance' => :'CashflowReportMonthlySummaryStartingBalance',
        :'ending_balance' => :'CashflowReportMonthlySummaryEndingBalance',
        :'average_daily_ending_balance' => :'CashflowReportMonthlySummaryAverageDailyEndingBalance',
        :'average_daily_inflow_amount' => :'CashflowReportMonthlySummaryAverageDailyInflowAmount',
        :'average_daily_outflow_amount' => :'CashflowReportMonthlySummaryAverageDailyOutflowAmount',
        :'average_daily_net_cashflow_amount' => :'CashflowReportMonthlySummaryAverageDailyNetCashflowAmount',
        :'average_daily_inflow_transaction_count' => :'Float',
        :'average_daily_outflow_transaction_count' => :'Float',
        :'total_revenue' => :'CashflowReportMonthlySummaryTotalRevenue',
        :'total_loan_payment' => :'CashflowReportMonthlySummaryTotalLoanPayment',
        :'total_variable_expense' => :'CashflowReportMonthlySummaryTotalVariableExpense',
        :'total_payroll' => :'CashflowReportMonthlySummaryTotalPayroll',
        :'nsf_transaction_count' => :'Integer',
        :'overdraft_transaction_count' => :'Integer',
        :'negative_ending_balance_day_count' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'starting_balance',
        :'ending_balance',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::CashflowReportMonthlySummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::CashflowReportMonthlySummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'starting_balance')
        self.starting_balance = attributes[:'starting_balance']
      end

      if attributes.key?(:'ending_balance')
        self.ending_balance = attributes[:'ending_balance']
      end

      if attributes.key?(:'average_daily_ending_balance')
        self.average_daily_ending_balance = attributes[:'average_daily_ending_balance']
      end

      if attributes.key?(:'average_daily_inflow_amount')
        self.average_daily_inflow_amount = attributes[:'average_daily_inflow_amount']
      end

      if attributes.key?(:'average_daily_outflow_amount')
        self.average_daily_outflow_amount = attributes[:'average_daily_outflow_amount']
      end

      if attributes.key?(:'average_daily_net_cashflow_amount')
        self.average_daily_net_cashflow_amount = attributes[:'average_daily_net_cashflow_amount']
      end

      if attributes.key?(:'average_daily_inflow_transaction_count')
        self.average_daily_inflow_transaction_count = attributes[:'average_daily_inflow_transaction_count']
      end

      if attributes.key?(:'average_daily_outflow_transaction_count')
        self.average_daily_outflow_transaction_count = attributes[:'average_daily_outflow_transaction_count']
      end

      if attributes.key?(:'total_revenue')
        self.total_revenue = attributes[:'total_revenue']
      end

      if attributes.key?(:'total_loan_payment')
        self.total_loan_payment = attributes[:'total_loan_payment']
      end

      if attributes.key?(:'total_variable_expense')
        self.total_variable_expense = attributes[:'total_variable_expense']
      end

      if attributes.key?(:'total_payroll')
        self.total_payroll = attributes[:'total_payroll']
      end

      if attributes.key?(:'nsf_transaction_count')
        self.nsf_transaction_count = attributes[:'nsf_transaction_count']
      end

      if attributes.key?(:'overdraft_transaction_count')
        self.overdraft_transaction_count = attributes[:'overdraft_transaction_count']
      end

      if attributes.key?(:'negative_ending_balance_day_count')
        self.negative_ending_balance_day_count = attributes[:'negative_ending_balance_day_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if @average_daily_ending_balance.nil?
        invalid_properties.push('invalid value for "average_daily_ending_balance", average_daily_ending_balance cannot be nil.')
      end

      if @average_daily_inflow_amount.nil?
        invalid_properties.push('invalid value for "average_daily_inflow_amount", average_daily_inflow_amount cannot be nil.')
      end

      if @average_daily_outflow_amount.nil?
        invalid_properties.push('invalid value for "average_daily_outflow_amount", average_daily_outflow_amount cannot be nil.')
      end

      if @average_daily_net_cashflow_amount.nil?
        invalid_properties.push('invalid value for "average_daily_net_cashflow_amount", average_daily_net_cashflow_amount cannot be nil.')
      end

      if @average_daily_inflow_transaction_count.nil?
        invalid_properties.push('invalid value for "average_daily_inflow_transaction_count", average_daily_inflow_transaction_count cannot be nil.')
      end

      if @average_daily_outflow_transaction_count.nil?
        invalid_properties.push('invalid value for "average_daily_outflow_transaction_count", average_daily_outflow_transaction_count cannot be nil.')
      end

      if @total_revenue.nil?
        invalid_properties.push('invalid value for "total_revenue", total_revenue cannot be nil.')
      end

      if @total_loan_payment.nil?
        invalid_properties.push('invalid value for "total_loan_payment", total_loan_payment cannot be nil.')
      end

      if @total_variable_expense.nil?
        invalid_properties.push('invalid value for "total_variable_expense", total_variable_expense cannot be nil.')
      end

      if @total_payroll.nil?
        invalid_properties.push('invalid value for "total_payroll", total_payroll cannot be nil.')
      end

      if @nsf_transaction_count.nil?
        invalid_properties.push('invalid value for "nsf_transaction_count", nsf_transaction_count cannot be nil.')
      end

      if @overdraft_transaction_count.nil?
        invalid_properties.push('invalid value for "overdraft_transaction_count", overdraft_transaction_count cannot be nil.')
      end

      if @negative_ending_balance_day_count.nil?
        invalid_properties.push('invalid value for "negative_ending_balance_day_count", negative_ending_balance_day_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @start_date.nil?
      return false if @end_date.nil?
      return false if @average_daily_ending_balance.nil?
      return false if @average_daily_inflow_amount.nil?
      return false if @average_daily_outflow_amount.nil?
      return false if @average_daily_net_cashflow_amount.nil?
      return false if @average_daily_inflow_transaction_count.nil?
      return false if @average_daily_outflow_transaction_count.nil?
      return false if @total_revenue.nil?
      return false if @total_loan_payment.nil?
      return false if @total_variable_expense.nil?
      return false if @total_payroll.nil?
      return false if @nsf_transaction_count.nil?
      return false if @overdraft_transaction_count.nil?
      return false if @negative_ending_balance_day_count.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          starting_balance == o.starting_balance &&
          ending_balance == o.ending_balance &&
          average_daily_ending_balance == o.average_daily_ending_balance &&
          average_daily_inflow_amount == o.average_daily_inflow_amount &&
          average_daily_outflow_amount == o.average_daily_outflow_amount &&
          average_daily_net_cashflow_amount == o.average_daily_net_cashflow_amount &&
          average_daily_inflow_transaction_count == o.average_daily_inflow_transaction_count &&
          average_daily_outflow_transaction_count == o.average_daily_outflow_transaction_count &&
          total_revenue == o.total_revenue &&
          total_loan_payment == o.total_loan_payment &&
          total_variable_expense == o.total_variable_expense &&
          total_payroll == o.total_payroll &&
          nsf_transaction_count == o.nsf_transaction_count &&
          overdraft_transaction_count == o.overdraft_transaction_count &&
          negative_ending_balance_day_count == o.negative_ending_balance_day_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [start_date, end_date, starting_balance, ending_balance, average_daily_ending_balance, average_daily_inflow_amount, average_daily_outflow_amount, average_daily_net_cashflow_amount, average_daily_inflow_transaction_count, average_daily_outflow_transaction_count, total_revenue, total_loan_payment, total_variable_expense, total_payroll, nsf_transaction_count, overdraft_transaction_count, negative_ending_balance_day_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
