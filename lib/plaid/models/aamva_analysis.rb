=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.658.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Analyzed AAMVA data for the associated hit.  Note: This field is only available for U.S. driver's licenses issued by participating states.
  class AAMVAAnalysis
    # The overall outcome of checking the associated hit against the issuing state database.
    attr_accessor :is_verified

    attr_accessor :id_number

    attr_accessor :id_issue_date

    attr_accessor :id_expiration_date

    attr_accessor :street

    attr_accessor :city

    attr_accessor :postal_code

    attr_accessor :date_of_birth

    attr_accessor :gender

    attr_accessor :height

    attr_accessor :eye_color

    attr_accessor :first_name

    attr_accessor :middle_name

    attr_accessor :last_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_verified' => :'is_verified',
        :'id_number' => :'id_number',
        :'id_issue_date' => :'id_issue_date',
        :'id_expiration_date' => :'id_expiration_date',
        :'street' => :'street',
        :'city' => :'city',
        :'postal_code' => :'postal_code',
        :'date_of_birth' => :'date_of_birth',
        :'gender' => :'gender',
        :'height' => :'height',
        :'eye_color' => :'eye_color',
        :'first_name' => :'first_name',
        :'middle_name' => :'middle_name',
        :'last_name' => :'last_name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_verified' => :'Boolean',
        :'id_number' => :'AAMVAMatchResult',
        :'id_issue_date' => :'AAMVAMatchResult',
        :'id_expiration_date' => :'AAMVAMatchResult',
        :'street' => :'AAMVADetailedMatchResult',
        :'city' => :'AAMVAMatchResult',
        :'postal_code' => :'AAMVADetailedMatchResult',
        :'date_of_birth' => :'AAMVAMatchResult',
        :'gender' => :'AAMVAMatchResult',
        :'height' => :'AAMVAMatchResult',
        :'eye_color' => :'AAMVAMatchResult',
        :'first_name' => :'AAMVADetailedMatchResult',
        :'middle_name' => :'AAMVADetailedMatchResult',
        :'last_name' => :'AAMVADetailedMatchResult'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::AAMVAAnalysis` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::AAMVAAnalysis`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_verified')
        self.is_verified = attributes[:'is_verified']
      end

      if attributes.key?(:'id_number')
        self.id_number = attributes[:'id_number']
      end

      if attributes.key?(:'id_issue_date')
        self.id_issue_date = attributes[:'id_issue_date']
      end

      if attributes.key?(:'id_expiration_date')
        self.id_expiration_date = attributes[:'id_expiration_date']
      end

      if attributes.key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'postal_code')
        self.postal_code = attributes[:'postal_code']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'eye_color')
        self.eye_color = attributes[:'eye_color']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @is_verified.nil?
        invalid_properties.push('invalid value for "is_verified", is_verified cannot be nil.')
      end

      if @id_number.nil?
        invalid_properties.push('invalid value for "id_number", id_number cannot be nil.')
      end

      if @id_issue_date.nil?
        invalid_properties.push('invalid value for "id_issue_date", id_issue_date cannot be nil.')
      end

      if @id_expiration_date.nil?
        invalid_properties.push('invalid value for "id_expiration_date", id_expiration_date cannot be nil.')
      end

      if @street.nil?
        invalid_properties.push('invalid value for "street", street cannot be nil.')
      end

      if @city.nil?
        invalid_properties.push('invalid value for "city", city cannot be nil.')
      end

      if @postal_code.nil?
        invalid_properties.push('invalid value for "postal_code", postal_code cannot be nil.')
      end

      if @date_of_birth.nil?
        invalid_properties.push('invalid value for "date_of_birth", date_of_birth cannot be nil.')
      end

      if @gender.nil?
        invalid_properties.push('invalid value for "gender", gender cannot be nil.')
      end

      if @height.nil?
        invalid_properties.push('invalid value for "height", height cannot be nil.')
      end

      if @eye_color.nil?
        invalid_properties.push('invalid value for "eye_color", eye_color cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @middle_name.nil?
        invalid_properties.push('invalid value for "middle_name", middle_name cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @is_verified.nil?
      return false if @id_number.nil?
      return false if @id_issue_date.nil?
      return false if @id_expiration_date.nil?
      return false if @street.nil?
      return false if @city.nil?
      return false if @postal_code.nil?
      return false if @date_of_birth.nil?
      return false if @gender.nil?
      return false if @height.nil?
      return false if @eye_color.nil?
      return false if @first_name.nil?
      return false if @middle_name.nil?
      return false if @last_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_verified == o.is_verified &&
          id_number == o.id_number &&
          id_issue_date == o.id_issue_date &&
          id_expiration_date == o.id_expiration_date &&
          street == o.street &&
          city == o.city &&
          postal_code == o.postal_code &&
          date_of_birth == o.date_of_birth &&
          gender == o.gender &&
          height == o.height &&
          eye_color == o.eye_color &&
          first_name == o.first_name &&
          middle_name == o.middle_name &&
          last_name == o.last_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_verified, id_number, id_issue_date, id_expiration_date, street, city, postal_code, date_of_birth, gender, height, eye_color, first_name, middle_name, last_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
