=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.610.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Analysis of the facial features of the selfie when compared to the face in the uploaded document, if one is present.
  class SelfieAnalysisFacialAnalysis
    attr_accessor :left_eye

    attr_accessor :right_eye

    attr_accessor :left_brow

    attr_accessor :right_brow

    attr_accessor :forehead

    attr_accessor :middle_forehead

    attr_accessor :nose

    attr_accessor :philtrum

    attr_accessor :mouth

    attr_accessor :jaw

    attr_accessor :left_cheek

    attr_accessor :right_cheek

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'left_eye' => :'left_eye',
        :'right_eye' => :'right_eye',
        :'left_brow' => :'left_brow',
        :'right_brow' => :'right_brow',
        :'forehead' => :'forehead',
        :'middle_forehead' => :'middle_forehead',
        :'nose' => :'nose',
        :'philtrum' => :'philtrum',
        :'mouth' => :'mouth',
        :'jaw' => :'jaw',
        :'left_cheek' => :'left_cheek',
        :'right_cheek' => :'right_cheek'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'left_eye' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'right_eye' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'left_brow' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'right_brow' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'forehead' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'middle_forehead' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'nose' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'philtrum' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'mouth' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'jaw' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'left_cheek' => :'SelfieAnalysisFacialAnalysisOutcome',
        :'right_cheek' => :'SelfieAnalysisFacialAnalysisOutcome'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::SelfieAnalysisFacialAnalysis` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::SelfieAnalysisFacialAnalysis`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'left_eye')
        self.left_eye = attributes[:'left_eye']
      end

      if attributes.key?(:'right_eye')
        self.right_eye = attributes[:'right_eye']
      end

      if attributes.key?(:'left_brow')
        self.left_brow = attributes[:'left_brow']
      end

      if attributes.key?(:'right_brow')
        self.right_brow = attributes[:'right_brow']
      end

      if attributes.key?(:'forehead')
        self.forehead = attributes[:'forehead']
      end

      if attributes.key?(:'middle_forehead')
        self.middle_forehead = attributes[:'middle_forehead']
      end

      if attributes.key?(:'nose')
        self.nose = attributes[:'nose']
      end

      if attributes.key?(:'philtrum')
        self.philtrum = attributes[:'philtrum']
      end

      if attributes.key?(:'mouth')
        self.mouth = attributes[:'mouth']
      end

      if attributes.key?(:'jaw')
        self.jaw = attributes[:'jaw']
      end

      if attributes.key?(:'left_cheek')
        self.left_cheek = attributes[:'left_cheek']
      end

      if attributes.key?(:'right_cheek')
        self.right_cheek = attributes[:'right_cheek']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @left_eye.nil?
        invalid_properties.push('invalid value for "left_eye", left_eye cannot be nil.')
      end

      if @right_eye.nil?
        invalid_properties.push('invalid value for "right_eye", right_eye cannot be nil.')
      end

      if @left_brow.nil?
        invalid_properties.push('invalid value for "left_brow", left_brow cannot be nil.')
      end

      if @right_brow.nil?
        invalid_properties.push('invalid value for "right_brow", right_brow cannot be nil.')
      end

      if @forehead.nil?
        invalid_properties.push('invalid value for "forehead", forehead cannot be nil.')
      end

      if @middle_forehead.nil?
        invalid_properties.push('invalid value for "middle_forehead", middle_forehead cannot be nil.')
      end

      if @nose.nil?
        invalid_properties.push('invalid value for "nose", nose cannot be nil.')
      end

      if @philtrum.nil?
        invalid_properties.push('invalid value for "philtrum", philtrum cannot be nil.')
      end

      if @mouth.nil?
        invalid_properties.push('invalid value for "mouth", mouth cannot be nil.')
      end

      if @jaw.nil?
        invalid_properties.push('invalid value for "jaw", jaw cannot be nil.')
      end

      if @left_cheek.nil?
        invalid_properties.push('invalid value for "left_cheek", left_cheek cannot be nil.')
      end

      if @right_cheek.nil?
        invalid_properties.push('invalid value for "right_cheek", right_cheek cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @left_eye.nil?
      return false if @right_eye.nil?
      return false if @left_brow.nil?
      return false if @right_brow.nil?
      return false if @forehead.nil?
      return false if @middle_forehead.nil?
      return false if @nose.nil?
      return false if @philtrum.nil?
      return false if @mouth.nil?
      return false if @jaw.nil?
      return false if @left_cheek.nil?
      return false if @right_cheek.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          left_eye == o.left_eye &&
          right_eye == o.right_eye &&
          left_brow == o.left_brow &&
          right_brow == o.right_brow &&
          forehead == o.forehead &&
          middle_forehead == o.middle_forehead &&
          nose == o.nose &&
          philtrum == o.philtrum &&
          mouth == o.mouth &&
          jaw == o.jaw &&
          left_cheek == o.left_cheek &&
          right_cheek == o.right_cheek
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [left_eye, right_eye, left_brow, right_brow, forehead, middle_forehead, nose, philtrum, mouth, jaw, left_cheek, right_cheek].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
