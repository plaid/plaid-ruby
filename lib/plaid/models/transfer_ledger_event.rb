=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.664.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Represents a ledger event in the Transfers API.
  class TransferLedgerEvent
    # Plaid's unique identifier for this ledger event.
    attr_accessor :ledger_event_id

    # The ID of the ledger this event belongs to.
    attr_accessor :ledger_id

    # The amount of the ledger event as a decimal string.
    attr_accessor :amount

    # The ID of the transfer source that triggered this ledger event.
    attr_accessor :transfer_id

    # The ID of the refund source that triggered this ledger event.
    attr_accessor :refund_id

    # The ID of the sweep source that triggered this ledger event.
    attr_accessor :sweep_id

    # A description of the ledger event.
    attr_accessor :description

    # The new pending balance after this event.
    attr_accessor :pending_balance

    # The new available balance after this event.
    attr_accessor :available_balance

    # The type of balance that was impacted by this event.
    attr_accessor :type

    # The datetime when this ledger event occurred.
    attr_accessor :timestamp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ledger_event_id' => :'ledger_event_id',
        :'ledger_id' => :'ledger_id',
        :'amount' => :'amount',
        :'transfer_id' => :'transfer_id',
        :'refund_id' => :'refund_id',
        :'sweep_id' => :'sweep_id',
        :'description' => :'description',
        :'pending_balance' => :'pending_balance',
        :'available_balance' => :'available_balance',
        :'type' => :'type',
        :'timestamp' => :'timestamp'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ledger_event_id' => :'String',
        :'ledger_id' => :'String',
        :'amount' => :'String',
        :'transfer_id' => :'String',
        :'refund_id' => :'String',
        :'sweep_id' => :'String',
        :'description' => :'String',
        :'pending_balance' => :'String',
        :'available_balance' => :'String',
        :'type' => :'String',
        :'timestamp' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'transfer_id',
        :'refund_id',
        :'sweep_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::TransferLedgerEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::TransferLedgerEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ledger_event_id')
        self.ledger_event_id = attributes[:'ledger_event_id']
      end

      if attributes.key?(:'ledger_id')
        self.ledger_id = attributes[:'ledger_id']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'transfer_id')
        self.transfer_id = attributes[:'transfer_id']
      end

      if attributes.key?(:'refund_id')
        self.refund_id = attributes[:'refund_id']
      end

      if attributes.key?(:'sweep_id')
        self.sweep_id = attributes[:'sweep_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'pending_balance')
        self.pending_balance = attributes[:'pending_balance']
      end

      if attributes.key?(:'available_balance')
        self.available_balance = attributes[:'available_balance']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @ledger_event_id.nil?
        invalid_properties.push('invalid value for "ledger_event_id", ledger_event_id cannot be nil.')
      end

      if @ledger_id.nil?
        invalid_properties.push('invalid value for "ledger_id", ledger_id cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @pending_balance.nil?
        invalid_properties.push('invalid value for "pending_balance", pending_balance cannot be nil.')
      end

      if @available_balance.nil?
        invalid_properties.push('invalid value for "available_balance", available_balance cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @ledger_event_id.nil?
      return false if @ledger_id.nil?
      return false if @amount.nil?
      return false if @description.nil?
      return false if @pending_balance.nil?
      return false if @available_balance.nil?
      return false if @type.nil?
      return false if @timestamp.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ledger_event_id == o.ledger_event_id &&
          ledger_id == o.ledger_id &&
          amount == o.amount &&
          transfer_id == o.transfer_id &&
          refund_id == o.refund_id &&
          sweep_id == o.sweep_id &&
          description == o.description &&
          pending_balance == o.pending_balance &&
          available_balance == o.available_balance &&
          type == o.type &&
          timestamp == o.timestamp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ledger_event_id, ledger_id, amount, transfer_id, refund_id, sweep_id, description, pending_balance, available_balance, type, timestamp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
