=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.658.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Details about an asset.
  class AssetDetail
    # A vendor created unique Identifier.
    attr_accessor :asset_unique_identifier

    # A unique alphanumeric string identifying an asset.
    attr_accessor :asset_account_identifier

    # Account Report As of Date / Create Date. Format YYYY-MM-DD
    attr_accessor :asset_as_of_date

    # A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
    attr_accessor :asset_description

    # Asset Account Available Balance.
    attr_accessor :asset_available_balance_amount

    # A vendor created unique Identifier
    attr_accessor :asset_current_balance_amount

    # Total market value of holdings (non-restricted, vested, not crypto, not other, not cash) Note: Any employer stock plan balance must be excluded from the total account balance (identification is 'stock plan')
    attr_accessor :asset_holding_balance_amount

    # HoldingsBalance net MarginAmount
    attr_accessor :asset_holding_balance_net_margin_amount

    # Total market value of all bonds held (non-restricted, vested)
    attr_accessor :asset_bonds_balance_amount

    # Total market value of all stocks held (non-restricted, vested, not employer sponsored stock plan)
    attr_accessor :asset_stocks_balance_amount

    # Total balance of all cryptocurrency held (non-restricted, vested)
    attr_accessor :asset_crypto_balance_amount

    # Total balance of all other holding types (non-restricted, vested)
    attr_accessor :asset_other_balance_amount

    # loan balance (amount owed by account owner)
    attr_accessor :asset_margin_amount_balance

    # amount available for cash withdrawal
    attr_accessor :asset_available_cash_balance_amount

    # cash balance of the account
    attr_accessor :asset_cash_balance_amount

    attr_accessor :asset_type

    # Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
    attr_accessor :asset_type_additional_description

    # The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
    attr_accessor :asset_days_requested_count

    # Ownership type of the asset account.
    attr_accessor :asset_ownership_type

    # Whether or not the account is a retirement account (e.g., 401K, 403b, 457, thrift savings plans, traditional and Roth, IRAs, SEP-IRA, SIMPLE-IRA, KEOGH, state retirement savings plans, other independent and IRS-qualified employer retirement plans)
    attr_accessor :asset_retirement_indicator

    # Whether the account is employer sponsored retirement account or not (e.g., 401K, 403b, 457, thrift savings plan)
    attr_accessor :asset_employer_sponsored_indicator

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset_unique_identifier' => :'AssetUniqueIdentifier',
        :'asset_account_identifier' => :'AssetAccountIdentifier',
        :'asset_as_of_date' => :'AssetAsOfDate',
        :'asset_description' => :'AssetDescription',
        :'asset_available_balance_amount' => :'AssetAvailableBalanceAmount',
        :'asset_current_balance_amount' => :'AssetCurrentBalanceAmount',
        :'asset_holding_balance_amount' => :'AssetHoldingBalanceAmount',
        :'asset_holding_balance_net_margin_amount' => :'AssetHoldingBalanceNetMarginAmount',
        :'asset_bonds_balance_amount' => :'AssetBondsBalanceAmount',
        :'asset_stocks_balance_amount' => :'AssetStocksBalanceAmount',
        :'asset_crypto_balance_amount' => :'AssetCryptoBalanceAmount',
        :'asset_other_balance_amount' => :'AssetOtherBalanceAmount',
        :'asset_margin_amount_balance' => :'AssetMarginAmountBalance',
        :'asset_available_cash_balance_amount' => :'AssetAvailableCashBalanceAmount',
        :'asset_cash_balance_amount' => :'AssetCashBalanceAmount',
        :'asset_type' => :'AssetType',
        :'asset_type_additional_description' => :'AssetTypeAdditionalDescription',
        :'asset_days_requested_count' => :'AssetDaysRequestedCount',
        :'asset_ownership_type' => :'AssetOwnershipType',
        :'asset_retirement_indicator' => :'AssetRetirementIndicator',
        :'asset_employer_sponsored_indicator' => :'AssetEmployerSponsoredIndicator'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'asset_unique_identifier' => :'String',
        :'asset_account_identifier' => :'String',
        :'asset_as_of_date' => :'String',
        :'asset_description' => :'String',
        :'asset_available_balance_amount' => :'Float',
        :'asset_current_balance_amount' => :'Float',
        :'asset_holding_balance_amount' => :'Float',
        :'asset_holding_balance_net_margin_amount' => :'Float',
        :'asset_bonds_balance_amount' => :'Float',
        :'asset_stocks_balance_amount' => :'Float',
        :'asset_crypto_balance_amount' => :'Float',
        :'asset_other_balance_amount' => :'Float',
        :'asset_margin_amount_balance' => :'Float',
        :'asset_available_cash_balance_amount' => :'Float',
        :'asset_cash_balance_amount' => :'Float',
        :'asset_type' => :'AssetType',
        :'asset_type_additional_description' => :'String',
        :'asset_days_requested_count' => :'Integer',
        :'asset_ownership_type' => :'String',
        :'asset_retirement_indicator' => :'String',
        :'asset_employer_sponsored_indicator' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'asset_description',
        :'asset_holding_balance_amount',
        :'asset_holding_balance_net_margin_amount',
        :'asset_bonds_balance_amount',
        :'asset_stocks_balance_amount',
        :'asset_crypto_balance_amount',
        :'asset_other_balance_amount',
        :'asset_margin_amount_balance',
        :'asset_available_cash_balance_amount',
        :'asset_cash_balance_amount',
        :'asset_type_additional_description',
        :'asset_ownership_type',
        :'asset_retirement_indicator',
        :'asset_employer_sponsored_indicator'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::AssetDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::AssetDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'asset_unique_identifier')
        self.asset_unique_identifier = attributes[:'asset_unique_identifier']
      end

      if attributes.key?(:'asset_account_identifier')
        self.asset_account_identifier = attributes[:'asset_account_identifier']
      end

      if attributes.key?(:'asset_as_of_date')
        self.asset_as_of_date = attributes[:'asset_as_of_date']
      end

      if attributes.key?(:'asset_description')
        self.asset_description = attributes[:'asset_description']
      end

      if attributes.key?(:'asset_available_balance_amount')
        self.asset_available_balance_amount = attributes[:'asset_available_balance_amount']
      end

      if attributes.key?(:'asset_current_balance_amount')
        self.asset_current_balance_amount = attributes[:'asset_current_balance_amount']
      end

      if attributes.key?(:'asset_holding_balance_amount')
        self.asset_holding_balance_amount = attributes[:'asset_holding_balance_amount']
      end

      if attributes.key?(:'asset_holding_balance_net_margin_amount')
        self.asset_holding_balance_net_margin_amount = attributes[:'asset_holding_balance_net_margin_amount']
      end

      if attributes.key?(:'asset_bonds_balance_amount')
        self.asset_bonds_balance_amount = attributes[:'asset_bonds_balance_amount']
      end

      if attributes.key?(:'asset_stocks_balance_amount')
        self.asset_stocks_balance_amount = attributes[:'asset_stocks_balance_amount']
      end

      if attributes.key?(:'asset_crypto_balance_amount')
        self.asset_crypto_balance_amount = attributes[:'asset_crypto_balance_amount']
      end

      if attributes.key?(:'asset_other_balance_amount')
        self.asset_other_balance_amount = attributes[:'asset_other_balance_amount']
      end

      if attributes.key?(:'asset_margin_amount_balance')
        self.asset_margin_amount_balance = attributes[:'asset_margin_amount_balance']
      end

      if attributes.key?(:'asset_available_cash_balance_amount')
        self.asset_available_cash_balance_amount = attributes[:'asset_available_cash_balance_amount']
      end

      if attributes.key?(:'asset_cash_balance_amount')
        self.asset_cash_balance_amount = attributes[:'asset_cash_balance_amount']
      end

      if attributes.key?(:'asset_type')
        self.asset_type = attributes[:'asset_type']
      end

      if attributes.key?(:'asset_type_additional_description')
        self.asset_type_additional_description = attributes[:'asset_type_additional_description']
      end

      if attributes.key?(:'asset_days_requested_count')
        self.asset_days_requested_count = attributes[:'asset_days_requested_count']
      end

      if attributes.key?(:'asset_ownership_type')
        self.asset_ownership_type = attributes[:'asset_ownership_type']
      end

      if attributes.key?(:'asset_retirement_indicator')
        self.asset_retirement_indicator = attributes[:'asset_retirement_indicator']
      end

      if attributes.key?(:'asset_employer_sponsored_indicator')
        self.asset_employer_sponsored_indicator = attributes[:'asset_employer_sponsored_indicator']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @asset_unique_identifier.nil?
        invalid_properties.push('invalid value for "asset_unique_identifier", asset_unique_identifier cannot be nil.')
      end

      if @asset_account_identifier.nil?
        invalid_properties.push('invalid value for "asset_account_identifier", asset_account_identifier cannot be nil.')
      end

      if @asset_as_of_date.nil?
        invalid_properties.push('invalid value for "asset_as_of_date", asset_as_of_date cannot be nil.')
      end

      if @asset_available_balance_amount.nil?
        invalid_properties.push('invalid value for "asset_available_balance_amount", asset_available_balance_amount cannot be nil.')
      end

      if @asset_current_balance_amount.nil?
        invalid_properties.push('invalid value for "asset_current_balance_amount", asset_current_balance_amount cannot be nil.')
      end

      if @asset_type.nil?
        invalid_properties.push('invalid value for "asset_type", asset_type cannot be nil.')
      end

      if @asset_days_requested_count.nil?
        invalid_properties.push('invalid value for "asset_days_requested_count", asset_days_requested_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @asset_unique_identifier.nil?
      return false if @asset_account_identifier.nil?
      return false if @asset_as_of_date.nil?
      return false if @asset_available_balance_amount.nil?
      return false if @asset_current_balance_amount.nil?
      return false if @asset_type.nil?
      return false if @asset_days_requested_count.nil?
      asset_retirement_indicator_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless asset_retirement_indicator_validator.valid?(@asset_retirement_indicator)
      asset_employer_sponsored_indicator_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless asset_employer_sponsored_indicator_validator.valid?(@asset_employer_sponsored_indicator)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_retirement_indicator Object to be assigned
    def asset_retirement_indicator=(asset_retirement_indicator)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(asset_retirement_indicator)
        fail ArgumentError, "invalid value for \"asset_retirement_indicator\", must be one of #{validator.allowable_values}."
      end
      @asset_retirement_indicator = asset_retirement_indicator
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_employer_sponsored_indicator Object to be assigned
    def asset_employer_sponsored_indicator=(asset_employer_sponsored_indicator)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(asset_employer_sponsored_indicator)
        fail ArgumentError, "invalid value for \"asset_employer_sponsored_indicator\", must be one of #{validator.allowable_values}."
      end
      @asset_employer_sponsored_indicator = asset_employer_sponsored_indicator
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset_unique_identifier == o.asset_unique_identifier &&
          asset_account_identifier == o.asset_account_identifier &&
          asset_as_of_date == o.asset_as_of_date &&
          asset_description == o.asset_description &&
          asset_available_balance_amount == o.asset_available_balance_amount &&
          asset_current_balance_amount == o.asset_current_balance_amount &&
          asset_holding_balance_amount == o.asset_holding_balance_amount &&
          asset_holding_balance_net_margin_amount == o.asset_holding_balance_net_margin_amount &&
          asset_bonds_balance_amount == o.asset_bonds_balance_amount &&
          asset_stocks_balance_amount == o.asset_stocks_balance_amount &&
          asset_crypto_balance_amount == o.asset_crypto_balance_amount &&
          asset_other_balance_amount == o.asset_other_balance_amount &&
          asset_margin_amount_balance == o.asset_margin_amount_balance &&
          asset_available_cash_balance_amount == o.asset_available_cash_balance_amount &&
          asset_cash_balance_amount == o.asset_cash_balance_amount &&
          asset_type == o.asset_type &&
          asset_type_additional_description == o.asset_type_additional_description &&
          asset_days_requested_count == o.asset_days_requested_count &&
          asset_ownership_type == o.asset_ownership_type &&
          asset_retirement_indicator == o.asset_retirement_indicator &&
          asset_employer_sponsored_indicator == o.asset_employer_sponsored_indicator
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [asset_unique_identifier, asset_account_identifier, asset_as_of_date, asset_description, asset_available_balance_amount, asset_current_balance_amount, asset_holding_balance_amount, asset_holding_balance_net_margin_amount, asset_bonds_balance_amount, asset_stocks_balance_amount, asset_crypto_balance_amount, asset_other_balance_amount, asset_margin_amount_balance, asset_available_cash_balance_amount, asset_cash_balance_amount, asset_type, asset_type_additional_description, asset_days_requested_count, asset_ownership_type, asset_retirement_indicator, asset_employer_sponsored_indicator].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
