=begin
#The Plaid API

#The Plaid REST API. Please see https://plaid.com/docs/api for more details.

The version of the OpenAPI document: 2020-09-14_1.508.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'date'
require 'time'

module Plaid
  # Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
  class AssetTransactionDetail
    # A vendor created unique Identifier.
    attr_accessor :asset_transaction_unique_identifier

    # Asset Transaction Amount.
    attr_accessor :asset_transaction_amount

    # Asset Transaction Date.
    attr_accessor :asset_transaction_date

    # Asset Transaction Post Date.
    attr_accessor :asset_transaction_post_date

    attr_accessor :asset_transaction_type

    # Populate with who did the transaction.
    attr_accessor :asset_transaction_paid_by_name

    # FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
    attr_accessor :asset_transaction_type_additional_description

    attr_accessor :asset_transaction_category_type

    # FI provided Transaction Identifier.
    attr_accessor :financial_institution_transaction_identifier

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset_transaction_unique_identifier' => :'AssetTransactionUniqueIdentifier',
        :'asset_transaction_amount' => :'AssetTransactionAmount',
        :'asset_transaction_date' => :'AssetTransactionDate',
        :'asset_transaction_post_date' => :'AssetTransactionPostDate',
        :'asset_transaction_type' => :'AssetTransactionType',
        :'asset_transaction_paid_by_name' => :'AssetTransactionPaidByName',
        :'asset_transaction_type_additional_description' => :'AssetTransactionTypeAdditionalDescription',
        :'asset_transaction_category_type' => :'AssetTransactionCategoryType',
        :'financial_institution_transaction_identifier' => :'FinancialInstitutionTransactionIdentifier'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'asset_transaction_unique_identifier' => :'String',
        :'asset_transaction_amount' => :'Float',
        :'asset_transaction_date' => :'Date',
        :'asset_transaction_post_date' => :'Date',
        :'asset_transaction_type' => :'AssetTransactionType',
        :'asset_transaction_paid_by_name' => :'String',
        :'asset_transaction_type_additional_description' => :'String',
        :'asset_transaction_category_type' => :'AssetTransactionCategoryType',
        :'financial_institution_transaction_identifier' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'asset_transaction_paid_by_name',
        :'asset_transaction_type_additional_description',
        :'asset_transaction_category_type',
        :'financial_institution_transaction_identifier'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Plaid::AssetTransactionDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Plaid::AssetTransactionDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'asset_transaction_unique_identifier')
        self.asset_transaction_unique_identifier = attributes[:'asset_transaction_unique_identifier']
      end

      if attributes.key?(:'asset_transaction_amount')
        self.asset_transaction_amount = attributes[:'asset_transaction_amount']
      end

      if attributes.key?(:'asset_transaction_date')
        self.asset_transaction_date = attributes[:'asset_transaction_date']
      end

      if attributes.key?(:'asset_transaction_post_date')
        self.asset_transaction_post_date = attributes[:'asset_transaction_post_date']
      end

      if attributes.key?(:'asset_transaction_type')
        self.asset_transaction_type = attributes[:'asset_transaction_type']
      end

      if attributes.key?(:'asset_transaction_paid_by_name')
        self.asset_transaction_paid_by_name = attributes[:'asset_transaction_paid_by_name']
      end

      if attributes.key?(:'asset_transaction_type_additional_description')
        self.asset_transaction_type_additional_description = attributes[:'asset_transaction_type_additional_description']
      end

      if attributes.key?(:'asset_transaction_category_type')
        self.asset_transaction_category_type = attributes[:'asset_transaction_category_type']
      end

      if attributes.key?(:'financial_institution_transaction_identifier')
        self.financial_institution_transaction_identifier = attributes[:'financial_institution_transaction_identifier']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @asset_transaction_unique_identifier.nil?
        invalid_properties.push('invalid value for "asset_transaction_unique_identifier", asset_transaction_unique_identifier cannot be nil.')
      end

      if @asset_transaction_amount.nil?
        invalid_properties.push('invalid value for "asset_transaction_amount", asset_transaction_amount cannot be nil.')
      end

      if @asset_transaction_date.nil?
        invalid_properties.push('invalid value for "asset_transaction_date", asset_transaction_date cannot be nil.')
      end

      if @asset_transaction_post_date.nil?
        invalid_properties.push('invalid value for "asset_transaction_post_date", asset_transaction_post_date cannot be nil.')
      end

      if @asset_transaction_type.nil?
        invalid_properties.push('invalid value for "asset_transaction_type", asset_transaction_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @asset_transaction_unique_identifier.nil?
      return false if @asset_transaction_amount.nil?
      return false if @asset_transaction_date.nil?
      return false if @asset_transaction_post_date.nil?
      return false if @asset_transaction_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset_transaction_unique_identifier == o.asset_transaction_unique_identifier &&
          asset_transaction_amount == o.asset_transaction_amount &&
          asset_transaction_date == o.asset_transaction_date &&
          asset_transaction_post_date == o.asset_transaction_post_date &&
          asset_transaction_type == o.asset_transaction_type &&
          asset_transaction_paid_by_name == o.asset_transaction_paid_by_name &&
          asset_transaction_type_additional_description == o.asset_transaction_type_additional_description &&
          asset_transaction_category_type == o.asset_transaction_category_type &&
          financial_institution_transaction_identifier == o.financial_institution_transaction_identifier
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [asset_transaction_unique_identifier, asset_transaction_amount, asset_transaction_date, asset_transaction_post_date, asset_transaction_type, asset_transaction_paid_by_name, asset_transaction_type_additional_description, asset_transaction_category_type, financial_institution_transaction_identifier].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Plaid.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
